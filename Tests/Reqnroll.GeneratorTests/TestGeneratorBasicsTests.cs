using FluentAssertions;
using Moq;
using Reqnroll.Generator.Configuration;
using Reqnroll.Generator.Interfaces;
using Reqnroll.GeneratorTests.Helper;
using System.IO;
using System.Text.RegularExpressions;
using Xunit;

namespace Reqnroll.GeneratorTests
{
    
    public class TestGeneratorBasicsTests : TestGeneratorTestsBase
    {
        private string GenerateTestFromSimpleFeature(ProjectSettings projectSettings, string projectRelativeFolderPath = null)
        {
            var testGenerator = CreateTestGenerator(projectSettings);

            var result = testGenerator.GenerateTestFile(CreateSimpleValidFeatureFileInput(projectRelativeFolderPath), DefaultSettings);
            result.Success.Should().Be(true);
            return result.GeneratedTestCode;
        }

        [Fact]
        public void Should_generate_a_net35_csharp_test_from_simple_feature()
        {
            string outputFile = GenerateTestFromSimpleFeature(CSharpProjectSettings);
            outputFile.Should().NotBeEmpty();
        }

        [Fact]
        public void Should_generate_a_net35_vb_test_from_simple_feature()
        {
            string outputFile = GenerateTestFromSimpleFeature(VBProjectSettings);
            outputFile.Should().NotBeEmpty();
        }

        [Fact]
        public void Should_include_header_in_generated_file()
        {
            string outputFile = GenerateTestFromSimpleFeature(CSharpProjectSettings);
            outputFile.Should().Contain("This code was generated by Reqnroll");
        }

        [Fact]
        public void Should_wrap_generated_test_with_designer_region()
        {
            string outputFile = GenerateTestFromSimpleFeature(CSharpProjectSettings);
            outputFile.Should().Contain("#region Designer generated code");
            outputFile.Should().Contain("#endregion");
        }

        [Fact]
        public void Should_include_generator_version_in_the_header()
        {
            string outputFile = GenerateTestFromSimpleFeature(CSharpProjectSettings);
            outputFile.Should().Contain(string.Format("Reqnroll Generator Version:{0}", GeneratorInfoProvider.GeneratorVersion));
        }

        [Fact]
        public void Should_include_namespace_declaration_using_default_namespace_when_file_in_project_root()
        {
            CSharpProjectSettings.DefaultNamespace = "Default.TestNamespace";
            string outputFile = GenerateTestFromSimpleFeature(CSharpProjectSettings);
            outputFile.Should().Contain(string.Format("namespace {0}", CSharpProjectSettings.DefaultNamespace));
        }

        [Fact]
        public void Should_include_namespace_declaration_using_default_namespace_and_folder_path_when_file_in_subfolder()
        {
            CSharpProjectSettings.DefaultNamespace = "Default.TestNamespace";
            string outputFile = GenerateTestFromSimpleFeature(CSharpProjectSettings, @"Folder1\Folder2");
            outputFile.Should().Contain(string.Format("namespace {0}.Folder1.Folder2", CSharpProjectSettings.DefaultNamespace));
        }

        [Fact]
        public void Should_include_namespace_declaration_using_fallback_namespace_when_default_namespace_not_set_and_file_in_project_root()
        {
            CSharpProjectSettings.DefaultNamespace = null;
            string outputFile = GenerateTestFromSimpleFeature(CSharpProjectSettings);
            outputFile.Should().Contain("namespace Reqnroll.GeneratedTests");
        }

        [Fact]
        public void Should_include_namespace_declaration_using_folder_path_when_default_namespace_not_set_and_file_in_subfolder()
        {
            CSharpProjectSettings.DefaultNamespace = null;
            string outputFile = GenerateTestFromSimpleFeature(CSharpProjectSettings, @"Folder1\Folder2");
            outputFile.Should().Contain(string.Format("namespace Folder1.Folder2", CSharpProjectSettings.DefaultNamespace));
        }

        [Fact]
        public void Should_generate_test_from_feature_file_specified_by_path()
        {
            using (var tempFile = new TempFile(".feature"))
            {
                tempFile.SetContent(CreateSimpleValidFeatureFileInput().FeatureFileContent);

                ProjectSettings projectSettings = new ProjectSettings { ProjectFolder = tempFile.FolderName, ProjectPlatformSettings = CSharpPlatformSettings };
                var testGenerator = CreateTestGenerator(projectSettings);

                var result = testGenerator.GenerateTestFile(
                    new FeatureFileInput(tempFile.FileName),
                    DefaultSettings);
                result.Success.Should().Be(true);
            }
        }

        private static string AssertFolderPathArgument(string outputFile)
        {
            var match = Regex.Match(outputFile, @"new global::Reqnroll\.FeatureInfo\([^;]*");
            match.Success.Should().BeTrue("FeatureInfo ctor should be found in output");
            var folderPathArgument = match.Value.Split(',')[1].Trim();
            folderPathArgument.Should().StartWith("\"").And.EndWith("\"", "the folderPath argument should be a string");
            return folderPathArgument;
        }

        [Fact]
        public void Should_generate_empty_folderpath_when_file_in_project_root()
        {
            string outputFile = GenerateTestFromSimpleFeature(CSharpProjectSettings);

            string folderPathArgument = AssertFolderPathArgument(outputFile);

            folderPathArgument.Should().Be("\"\"");
        }

        [Fact]
        public void Should_generate_folderpath_with_slash_separator_when_file_in_subfolder()
        {
            string outputFile = GenerateTestFromSimpleFeature(CSharpProjectSettings, Path.Combine("Folder1", "Folder2"));

            string folderPathArgument = AssertFolderPathArgument(outputFile);

            folderPathArgument.Should().Be("\"Folder1/Folder2\"");
        }
    }
}
