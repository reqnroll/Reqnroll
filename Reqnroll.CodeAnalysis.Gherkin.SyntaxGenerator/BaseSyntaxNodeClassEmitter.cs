namespace Reqnroll.CodeAnalysis.Gherkin.SyntaxGenerator;

internal class BaseSyntaxNodeClassEmitter(SyntaxNodeClassInfo classInfo)
{
    public string EmitSyntaxNodeClass()
    {
        var builder = new CSharpBuilder();

        builder.AppendLine("// <auto-generated/>");
        builder.AppendLine("#nullable enable");

        builder.Append("namespace ").Append(classInfo.ClassNamespace).AppendLine(';');

        builder.Append("public abstract partial class ").AppendLine(classInfo.ClassName);
        builder.AppendBodyBlock(builder =>
        {
            AppendOrphanConstructorTo(builder);
            builder.AppendLine();

            AppendParentalConstructorTo(builder);
            builder.AppendLine();

            AppendInternalNodePropertyTo(builder);
            builder.AppendLine();

            //foreach (var property in classInfo.SlotProperties.Where(property => !property.IsInherited))
            //{
            //    new SlotPropertyEmitter(property).EmitSlotPropertyTo(builder);
            //    builder.AppendLine();
            //}

            //AppendGetSlotAsSyntaxNodeMethodTo(builder);
            //builder.AppendLine();
        });

        return builder.ToString();
    }

    private void AppendInternalNodePropertyTo(CSharpBuilder builder)
    {
        builder
            .Append("internal new ")
            .Append(InternalNodeClassEmitter.ClassName)
            .Append(" InternalNode => (")
            .Append(InternalNodeClassEmitter.ClassName)
            .AppendLine(")base.InternalNode;");
    }

    private void AppendGetSlotAsSyntaxNodeMethodTo(CSharpBuilder builder)
    {
        builder.AppendLine("internal override SyntaxNode? GetSlotAsSyntaxNode(int index)");
        builder.AppendBodyBlock(builder =>
        {
            builder.AppendLine("return index switch");
            builder.AppendBlock("{", builder =>
            {
                foreach (var property in classInfo.SlotProperties
                    .Where(property => property.NodeType == SyntaxNodeType.SyntaxNode))
                {
                    builder.Append(property.Index.ToString()).Append(" => ").Append(property.Name).AppendLine(",");
                }

                builder.AppendLine("_ => null");
            }, "};");
        });
    }

    private void AppendParentalConstructorTo(CSharpBuilder builder)
    {
        builder
            .Append("internal ")
            .Append(classInfo.ClassName)
            .Append('(')
            .Append(InternalNodeClassEmitter.ClassName)
            .AppendLine(" node, SyntaxNode? parent, int position)");
        builder.BeginBlock();
        builder.AppendLine(": base(node, parent, position) {}");
        builder.EndBlock();
    }

    private void AppendOrphanConstructorTo(CSharpBuilder builder)
    {
        builder
            .Append("internal ")
            .Append(classInfo.ClassName)
            .Append('(')
            .Append(InternalNodeClassEmitter.ClassName)
            .AppendLine(" node)");
        builder.BeginBlock();
        builder.AppendLine(": base(node) {}");
        builder.EndBlock();
    }
}
