namespace Reqnroll.StepBindingSourceGenerator;

internal class StepDefinitionEmitter
{
    public string EmitStepDefinitionCatalogClass(StepDefinitionCatalogInfo catalogClass)
    {
        var builder = new CSharpBuilder();

        builder.AppendLine("// <auto-generated />");

        builder.Append("namespace ").AppendLine(catalogClass.ClassName.Namespace);
        builder.AppendBodyBlock(builder =>
        {
            builder
                .Append("internal static partial class ")
                .AppendLine(catalogClass.ClassName.Name);

            builder.AppendBodyBlock(builder => 
            {
                foreach (var stepDefinition in catalogClass.StepDefinitions)
                {
                    EmitStepDefinitionDescriptorProperty(builder, stepDefinition);

                }
            });
        });

        return builder.ToString();
    }

    private static void EmitStepDefinitionDescriptorProperty(CSharpBuilder builder, StepDefinitionInfo stepDefinition)
    {
        builder
            .AppendLine("/// <summary>")
            .Append("/// Gets the descriptor of the step \"").Append(stepDefinition.DisplayName).AppendLine("\"")
            .AppendLine("/// </summary>");

        builder
            .Append("public static Reqnroll.Bindings.StepDefinitionDescriptor ")
            .Append(stepDefinition.Name)
            .AppendLine("Definition { get; } = new global::Reqnroll.Bindings.StepDefinitionDescriptor(")
            .BeginBlock();

        builder
            .Append('"')
            .Append(stepDefinition.DisplayName)
            .AppendLine("\",");

        builder.AppendLine("global::System.Collections.Immutable.ImmutableArray.Create(");
        builder.BeginBlock();

        if (stepDefinition.MatchesKeywords == StepKeywordMatch.Any)
        {
            // Apply all three keywords to the constructor.
            builder
                .AppendLine("global::Reqnroll.Bindings.StepDefinitionType.Given,")
                .AppendLine("global::Reqnroll.Bindings.StepDefinitionType.When,")
                .AppendLine("global::Reqnroll.Bindings.StepDefinitionType.Then),");
        }
        else
        {
            builder
                .Append("global::Reqnroll.Bindings.StepDefinitionType.")
                .Append(stepDefinition.MatchesKeywords.ToString())
                .AppendLine("),");
        }

        builder.EndBlock();

        if (stepDefinition.TextPattern == null)
        {
            builder.AppendLine("global::Reqnroll.Bindings.StepTextPattern.None,");
        }
        else if (stepDefinition.BindingMethod == BindingMethod.RegularExpression)
        {
            builder
                .Append("global::Reqnroll.Bindings.StepTextPattern.RegularExpression(\"")
                .Append(stepDefinition.TextPattern)
                .AppendLine("\"),");
        }
        else
        {
            builder
                .Append("global::Reqnroll.Bindings.StepTextPattern.CucumberExpression(\"")
                .Append(stepDefinition.TextPattern)
                .AppendLine("\"),");
        }

        builder
            .Append("global::System.Collections.Immutable.ImmutableArray")
            .AppendLine(".Create<global::Reqnroll.Bindings.StepParameterDescriptor>(");

        builder.BeginBlock();

        var isFirst = true;
        foreach (var parameter in stepDefinition.Method.Parameters)
        {
            if (!isFirst)
            {
                builder.AppendLine(',');
            }

            builder
                .Append("new global::Reqnroll.Bindings.StepParameterDescriptor(\"")
                .Append(parameter.Name)
                .Append("\", typeof(")
                .Append(parameter.ParameterType)
                .Append("))");

            isFirst = false;
        }

        builder.AppendLine("));");

        builder.EndBlock();

        builder.EndBlock();
    }
}
