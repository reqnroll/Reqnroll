


namespace Reqnroll.StepBindingSourceGenerator;

internal class RegistryClassEmitter(string @namespace)
{
    public string Namespace { get; } = @namespace;

    public string ClassName { get; } = "ReqnrollStepRegistry";

    /// <summary>
    /// Emits a partial class definition that contains the constructor of the registry class. The constructor has the
    /// responsibility of aggregating all set definitions into the registry.
    /// </summary>
    /// <param name="stepDefinitionGroups">The collection of step definition groups to include in the constructor.</param>
    /// <returns>The class definition.</returns>
    public string EmitRegistryClassConstructor(IEnumerable<StepDefinitionGroup> stepDefinitionGroups)
    {
        var builder = new CSharpBuilder();

        builder.AppendLine("// <auto-generated />");
        builder.AppendLine("#nullable enable");

        builder.AppendLine();
        builder
            .Append("[assembly:Reqnroll.Bindings.StepDefinitionRegistryAttribute(typeof(")
            .Append(Namespace)
            .Append('.')
            .Append(ClassName)
            .AppendLine("))]");
        builder.AppendLine();

        builder.Append("namespace ").AppendLine(Namespace);
        builder.AppendBodyBlock(builder =>
        {
            builder.AppendLine("/// <summary>");
            builder.AppendLine("/// Provides a registry of all steps defined in this assembly.");
            builder.AppendLine("/// </summary>");
            builder
                .Append("public partial class ")
                .Append(ClassName)
                .Append(" : ")
                .AppendLine("global::Reqnroll.Bindings.StepDefinitionRegistry");

            builder.AppendBodyBlock(builder =>
            {
                builder.AppendLine("/// <summary>");
                builder.AppendLine("/// Gets the instance of the step registry.");
                builder.AppendLine("/// </summary>");
                builder
                    .Append("public static ")
                    .Append(ClassName)
                    .Append(" Instance { get; } = new ")
                    .Append(ClassName)
                    .AppendLine("();");
                builder.AppendLine();

                builder.Append("private ").Append(ClassName).AppendLine("()");
                builder.AppendBodyBlock(builder =>
                {
                    foreach (var stepDefinitionGroup in stepDefinitionGroups)
                    {
                        builder
                            .Append("Register")
                            .Append(stepDefinitionGroup.GroupName)
                            .AppendLine("();");
                    }
                });
            });
        });

        return builder.ToString();
    }

    public string EmitStepGroupRegisterMethod(StepDefinitionGroup stepGroup)
    {
        var builder = new CSharpBuilder();

        builder.AppendLine("// <auto-generated />");
        builder.AppendLine("#nullable enable");

        builder.Append("namespace ").AppendLine(Namespace);
        builder.AppendBodyBlock(builder =>
        {
            builder
                .Append("public partial class ")
                .Append(ClassName)
                .Append(" : ")
                .AppendLine("global::Reqnroll.Bindings.StepDefinitionRegistry");

            builder.AppendBodyBlock(builder =>
            {
                builder.Append("private void Register").Append(stepGroup.GroupName).AppendLine("()");
                builder.AppendBodyBlock(builder => AppendStepGroupRegisterMethodBodyTo(builder, stepGroup));
            });
        });

        return builder.ToString();
    }

    private void AppendStepGroupRegisterMethodBodyTo(CSharpBuilder builder, StepDefinitionGroup stepGroup)
    {
        var isFirst = true;
        foreach (var stepDefinition in stepGroup.StepDefinitions)
        {
            if (!isFirst)
            {
                builder.AppendLine();
            }

            AppendStepDefinitionRegistrationTo(builder, stepDefinition);

            isFirst = false;
        }
    }

    private void AppendStepDefinitionRegistrationTo(CSharpBuilder builder, StepDefinitionInfo stepDefinition)
    {
        builder
            .Append("Register(")
            .AppendLine()
            .BeginBlock();

        builder
            .AppendLine("new global::Reqnroll.Bindings.StepDefinitionDescriptor(")
            .BeginBlock();

        builder
            .AppendLiteral(stepDefinition.DisplayName)
            .AppendLine(",");

        builder.AppendLine("global::System.Collections.Immutable.ImmutableArray.Create(");
        builder.BeginBlock();

        if (stepDefinition.MatchesKeywords == StepKeywordMatch.Any)
        {
            // Apply all three keywords to the constructor.
            builder
                .AppendLine("global::Reqnroll.Bindings.StepDefinitionType.Given,")
                .AppendLine("global::Reqnroll.Bindings.StepDefinitionType.When,")
                .AppendLine("global::Reqnroll.Bindings.StepDefinitionType.Then),");
        }
        else
        {
            builder
                .Append("global::Reqnroll.Bindings.StepDefinitionType.")
                .Append(stepDefinition.MatchesKeywords.ToString())
                .AppendLine("),");
        }

        builder.EndBlock();

        if (stepDefinition.TextPattern == null)
        {
            builder.AppendLine("global::Reqnroll.Bindings.StepTextPattern.None,");
        }
        else if (stepDefinition.BindingMethod == BindingMethod.RegularExpression)
        {
            builder
                .Append("global::Reqnroll.Bindings.StepTextPattern.RegularExpression(")
                .AppendLiteral(stepDefinition.TextPattern)
                .AppendLine("),");
        }
        else
        {
            builder
                .Append("global::Reqnroll.Bindings.StepTextPattern.CucumberExpression(")
                .AppendLiteral(stepDefinition.TextPattern)
                .AppendLine("),");
        }

        builder
            .Append("global::System.Collections.Immutable.ImmutableArray")
            .AppendLine(".Create<global::Reqnroll.Bindings.StepParameterDescriptor>(");

        builder.BeginBlock();

        var isFirst = true;
        foreach (var parameter in stepDefinition.Method.Parameters)
        {
            if (!isFirst)
            {
                builder.AppendLine(',');
            }

            builder
                .Append("new global::Reqnroll.Bindings.StepParameterDescriptor(\"")
                .Append(parameter.Name)
                .Append("\", typeof(")
                .Append(parameter.ParameterType)
                .Append("))");

            isFirst = false;
        }

        builder.AppendLine(")));");

        builder.EndBlock();
        builder.EndBlock();
    }
}
