using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using Reqnroll.CodeAnalysis.Gherkin.Syntax.Internal;
using System.Diagnostics;
using System.Text;

namespace Reqnroll.CodeAnalysis.Gherkin.Syntax;

/// <summary>
/// Represents a non-terminal node in a Gerkin syntax tree.
/// </summary>
/// <remarks>
/// <para>This class is loosely based around the public interface of Roslyn's syntax tree: 
/// <see cref="Microsoft.CodeAnalysis.SyntaxNode"/>.</para>
/// </remarks>
[DebuggerDisplay("{GetDebuggerDisplay(), nq}")]
public abstract class SyntaxNode
{
    private GherkinSyntaxTree? _syntaxTree;

    internal SyntaxNode(RawNode node)
    {
        RawNode = node;
    }

    internal SyntaxNode(RawNode node, SyntaxNode? parent, int position)
    {
        Debug.Assert(position >= 0, "Node position cannot be negative");

        RawNode = node;
        Parent = parent;
        Position = position;
    }

    internal int Position { get; }

    /// <summary>
    /// Gets the syntax tree this node belongs to.
    /// </summary>
    public GherkinSyntaxTree SyntaxTree => _syntaxTree ?? ComputeSyntaxTree();

    /// <summary>
    /// Gets the internal node which this syntax node provides a structured view of.
    /// </summary>
    internal RawNode RawNode { get; }

    private GherkinSyntaxTree ComputeSyntaxTree()
    {
        if (Parent != null)
        {
            return Parent.SyntaxTree;
        }

        return new GherkinSyntaxTree(null, this, GherkinParseOptions.Default, string.Empty);
    }

    /// <summary>
    /// Gets the absolute span of this node in characters, including its leading and trailing trivia.
    /// </summary>
    public TextSpan FullSpan => new(Position, RawNode.FullWidth);

    /// <summary>
    /// Gets the absolute span of this node in characters, not including its leading and trailing trivia.
    /// </summary>
    public TextSpan Span => new(Position + RawNode.GetLeadingTriviaWidth(), RawNode.Width);

    /// <summary>
    /// Determines whether this node has any leading trivia.
    /// </summary>
    public bool HasLeadingTrivia => RawNode.HasLeadingTrivia;

    /// <summary>
    /// Determines whether this node has any leading trivia.
    /// </summary>
    public bool HasTrailingTrivia => RawNode.HasTrailingTrivia;

    /// <summary>
    /// Gets the node that is the parent of this node.
    /// </summary>
    public SyntaxNode? Parent { get; }

    /// <summary>
    /// Gets a value indicating whether this node or any of its descendant nodes or tokens have diagnostics on them.
    /// </summary>
    public bool HasDiagnostics { get; }

    /// <summary>
    /// Gets a value indicating whether the node represents a construct that not actually present in the source code.
    /// Missing nodes are generated by the parser in error scenarios to represent structural syntax that was expected to be 
    /// present in the source code but were actually missing.
    /// </summary>
    public bool IsMissing => RawNode.IsMissing;

    /// <summary>
    /// Gets the kind of the syntax node.
    /// </summary>
    public SyntaxKind Kind => RawNode.Kind;

    /// <summary>
    /// Gets a list of the nodes which are children of this node, in prefix document order.
    /// </summary>
    /// <returns>A list of the child nodes, in prefix document order.</returns>
    public IEnumerable<SyntaxNode> ChildNodes()
    {
        throw new NotImplementedException();
    }

    /// <summary>
    /// Gets a list of all the diagnostics in the sub tree that has this node as its root.
    /// </summary>
    /// <returns>A list of the diagnostics in the sub tree.</returns>
    public IEnumerable<Diagnostic> GetDiagnostics() => SyntaxTree.GetDiagnostics(this);

    /// <summary>
    /// Gets the location of this syntax node in the source document.
    /// </summary>
    /// <returns>The location of this syntax node.</returns>
    public Location GetLocation() => SyntaxTree.GetLocation(Span);

    /// <summary>
    /// Gets the list of syntax trivia which leads this syntax node.
    /// </summary>
    /// <returns>The list of syntax trivia leading this node.</returns>
    public SyntaxTriviaList GetLeadingTrivia() => GetFirstToken().LeadingTrivia;

    /// <summary>
    /// Gets the list of syntax trivia which trails this syntax node.
    /// </summary>
    /// <returns>The list of syntax trivia trailing this node.</returns>
    public SyntaxTriviaList GetTrailingTrivia() => GetLastToken().TrailingTrivia;

    internal static T CloneAsRoot<T>(T node, GherkinSyntaxTree syntaxTree) where T : SyntaxNode
    {
        var clone = (T)node.RawNode.CreateSyntaxNode();
        clone._syntaxTree = syntaxTree;

        return clone;
    }

    public SyntaxNode WithAdditionalAnnotations(IEnumerable<SyntaxAnnotation> annotations)
    {
        return RawNode.WithAdditionalAnnotations(annotations).CreateSyntaxNode();
    }

    public ChildSyntaxList ChildNodesAndTokens() => new(this);

    internal TNode? GetSyntaxNode<TNode>(ref TNode? field, int slot) where TNode : SyntaxNode
    {
        if (field == null)
        {
            var node = RawNode.GetSlot(slot);

            if (node != null)
            {
                field = (TNode)node.CreateSyntaxNode(this, RawNode.GetSlotOffset(slot));
            }
        }

        return field;
    }

    internal abstract SyntaxNode? GetNodeSlot(int index);

    public SyntaxToken GetFirstToken()
    {
        var child = ChildNodesAndTokens().First();

        if (child.IsToken)
        {
            return child.AsToken();
        }

        if (child.IsNode)
        {
            return child.AsNode()!.GetFirstToken();
        }

        return default;
    }

    public SyntaxToken GetLastToken()
    {
        var child = ChildNodesAndTokens().Last();

        if (child.IsToken)
        {
            return child.AsToken();
        }

        if (child.IsNode)
        {
            return child.AsNode()!.GetLastToken();
        }

        return default;
    }

    public SourceText GetText(Encoding? encoding = null, SourceHashAlgorithm checksumAlgorithm = SourceHashAlgorithm.Sha1)
    {
        var builder = new StringBuilder(RawNode.FullWidth);
        WriteTo(new StringWriter(builder));
        return new BuiltSourceText(builder, encoding, checksumAlgorithm);
    }

    public virtual void WriteTo(TextWriter writer) => RawNode.WriteTo(writer);

    public override string ToString() => RawNode?.ToString() ?? string.Empty;

    public string ToFullString() => RawNode?.ToFullString() ?? string.Empty;

    private string GetDebuggerDisplay() => GetType().Name + " " + (Kind.ToString()) + " " + ToString();
}
